#!/usr/bin/env python3

import os
import time
import logging
import multiprocessing as mp

import scripts.tick as tick  # socket stream
import scripts.orderdiff as diff  # socket stream
import scripts.orderbook as book  # http polling

# Start all 3 collection scripts
if __name__ == '__main__':

    # configure logger
    sh = logging.StreamHandler()
    sh.setLevel(logging.INFO)
    fh = logging.FileHandler('collect.log')
    fh.setLevel(logging.DEBUG)

    logger = logging.getLogger('main')
    logger.setLevel(logging.DEBUG)

    logging.getLogger().addHandler(sh)
    logging.getLogger().addHandler(fh)
    logging.getLogger().setLevel(logging.DEBUG)
    logging.getLogger('pysher.connection').setLevel(logging.DEBUG)

    # holds all collection processes
    ps = []

    # read configs and init processes
    for module in (tick, diff, book):
        config = {}
        conf = module.CONFIG_FILE
        if os.path.isfile(conf):
            with open(conf) as f:
                for line in f:
                    name, var = line.partition('=')[::2]
                    config[name.strip()] = eval(var.strip())
        ps.append(mp.Process(target=module.main, kwargs=config))

    # start all collection
    for p in ps:
        p.start()

    # listen and handle termination signals
    while True:
        try:
            time.sleep(0.5)
        except KeyboardInterrupt:
            for p in ps:
                p.terminate()
                logger.debug('SIGTERM sent to %s', p.name)
            break

    # debug log
    for p in ps:
        p.join(5)
        logger.debug('%s joined', p.name)
